<?php

/**
 * Copyright 2010-2016 Pavel Terentyev <pavel.terentyev@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

use gossi\codegen\generator\CodeGenerator;
use gossi\codegen\model\PhpClass;
use gossi\codegen\model\PhpProperty;
use gossi\codegen\model\AbstractPhpMember;

/**
 * Class SimpleObject
 */
class SimpleObject
{

    /**
     * @var array
     */
    static private $default_settings = [
        'dbcon' => [
            'host' => 'localhost',
            'user' => 'root',
            'password' => '',
            'database' => 'simpleobject'
        ],
        'path_models' => ''
    ];

    /**
     * @var array
     */
    static private $settings = [];

    /**
     * @param $name
     * @return null
     */
    public static function getSettingsValue($name)
    {
        if (isset(self::$settings[$name])) {
            return self::$settings[$name];
        }
        if (isset(self::$default_settings[$name])) {
            return self::$default_settings[$name];
        }
        return null;
    }

    /**
     * Must be called BEFORE any usage of library
     * @param $options
     */
    public static function init($options)
    {
        self::$settings = $options;
    }

    /**
     * @param array $settings
     * @return bool
     */
    private static function validateSettings(array $settings)
    {
        //TODO: implement options validation
        return true;
    }

    /**
     * Database connection
     * @var null|PDO
     */
    static private $connection = null;

    /**
     * @return SimpleObject_PDO
     */
    public static function getConnection()
    {
        if (is_null(self::$connection)) {
            $dbSettings = self::getSettingsValue('dbcon');
            self::$connection = new SimpleObject_PDO('mysql:host=' . $dbSettings['host'] . ';dbname=' . $dbSettings['database'],
                $dbSettings['user'], $dbSettings['password']);
        }
        return self::$connection;
    }

    /**
     * Wipes all autogenerated models
     */
    protected static function wipeBaseModels()
    {
        if (!file_exists(self::getSettingsValue('path_models') . '/Base/')){
            mkdir(self::getSettingsValue('path_models') . '/Base/');
        }
        $dir = opendir(self::getSettingsValue('path_models') . '/Base/');
        while ($file = readdir($dir)) {
            if (is_dir(self::getSettingsValue('path_models') . '/Base/' . $file)) {
                continue;
            }
            unlink(self::getSettingsValue('path_models') . '/Base/' . $file);
        }
    }

    public static function reverseEngineerModels()
    {
        if (!class_exists('SimpleConsole')){
            throw new SimpleObject_Exception('SimpleConsole needed');
        }
        $CC = SimpleConsole::getInstance();
        $dbSettings = self::getSettingsValue('dbcon');
        $CC->dropLF();
        $CC->drawLogo(
            [
                'Reverse engineering database '.
                SimpleConsole_Colors::colorize($dbSettings['database'],SimpleConsole_Colors::LIGHT_GREEN)
            ],
            SimpleConsole_Colors::WHITE
        );

        $CC->dropText('Removing all base models');
        self::wipeBaseModels();

        $sql = 'SHOW TABLES FROM `'.$dbSettings['database'].'`';
        $stmt = self::getConnection()->prepare($sql);
        $stmt->execute();
        if ($stmt->errorCode()>0){
            throw new SimpleObject_Exception($stmt->errorInfo()[2]);
        }
        $tables = $stmt->fetchAll(PDO::FETCH_NUM);
        $generator = new CodeGenerator();

        $CC->dropText('Generating files:');
        foreach ($tables as $tableRow) {

            $tableName = $tableRow[0];
            $CC->indentedEcho('Table '.SimpleConsole_Colors::colorize($tableName,SimpleConsole_Colors::LIGHT_BLUE).'... ',SimpleConsole_Colors::GRAY);
            $CCName = SimpleObject_Transform::CCName($tableName);

            $tableInfo = [
                'table_name' => $tableName,
                'file_name' => $CCName.'.php',
                'class_name' => 'Model_'.$CCName,
                'base_class_name' => 'Model_Base_' . $CCName,
                'fields' => []
            ];

            $FinalModel = new PhpClass();
            $FinalModel
                ->setName($tableInfo['class_name'])
                ->setParentClassName($tableInfo['base_class_name'])
            ;
            $FinalCode = file_get_contents(__DIR__.'/CodeParts/final_model_head.php').$generator->generate($FinalModel);
            self::writeModel($tableInfo['file_name'],$FinalCode);
            $CC->cEcho('Final ',SimpleConsole_Colors::GREEN);
            $BaseModel = new PhpClass();
            $BaseModel
                ->setName($tableInfo['base_class_name'])
                ->setParentClassName('SimpleObject_Abstract')
                ->setAbstract(true)
            ;
            $BaseModel->setProperty(
                PhpProperty::create('DBTable')
                    ->setDefaultValue($tableInfo['table_name'])
                    ->setVisibility(AbstractPhpMember::VISIBILITY_PROTECTED)
            );

            $TFields = [];
            $Properties = [];
            $field2PropertyTransform = [];
            $property2FieldTransform = [];

            $sql = 'DESCRIBE `' . $tableName.'`';
            $stmt = self::getConnection()->prepare($sql);
            $stmt->execute();
            $fields = $stmt->fetchAll(PDO::FETCH_ASSOC);
            foreach ($fields as $num => $_row) {
                $TFields[$num] = $_row['Field'];
                $Properties[$num] = SimpleObject_Transform::CCName($_row['Field']);

                switch ($_row['Type']) {
                    default:
                        //$CC->dropText($_row['Type']);
                        break;
                    case 'timestamp':
                    case 'date':
                    case 'datetime':
                        $field2PropertyTransform[$num][] = 'date2time';
                        $property2FieldTransform[$num][] = 'time2date|Y-m-d H:i:s';
                        break;
                    case 'tinyint(1)':
                        $field2PropertyTransform[$num][] = 'digit2boolean';
                        $property2FieldTransform[$num][] = 'boolean2digit';
                        break;
                }
            }
            $BaseModel->setProperty(
                PhpProperty::create('TFields')
                    ->setDefaultValue($TFields)
                    ->setVisibility(AbstractPhpMember::VISIBILITY_PROTECTED)
            );
            $BaseModel->setProperty(
                PhpProperty::create('Properties')
                    ->setDefaultValue($Properties)
                    ->setVisibility(AbstractPhpMember::VISIBILITY_PROTECTED)
            );
            $BaseModel->setProperty(
                PhpProperty::create('field2PropertyTransform')
                    ->setDefaultValue($field2PropertyTransform)
                    ->setVisibility(AbstractPhpMember::VISIBILITY_PROTECTED)
            );
            $BaseModel->setProperty(
                PhpProperty::create('property2FieldTransform')
                    ->setDefaultValue($property2FieldTransform)
                    ->setVisibility(AbstractPhpMember::VISIBILITY_PROTECTED)
            );
            foreach ($Properties as $property){
                $BaseModel->setProperty(
                    PhpProperty::create($property)
                        ->setVisibility(AbstractPhpMember::VISIBILITY_PUBLIC)
                );

            }
            $BaseCode = file_get_contents(__DIR__.'/CodeParts/base_model_head.php').$generator->generate($BaseModel);
            self::writeModel($tableInfo['file_name'],$BaseCode,true);
            $CC->cEcho('Base ',SimpleConsole_Colors::GREEN);
            $CC->dropLF();
        }
        $CC->dropLF();
        $CC->dropText('All done.');
    }

    private static function writeModel($filename,$contents,$base=false)
    {
        $path = self::getSettingsValue('path_models').($base?'/Base':'').'/'.$filename;
        if (!file_exists($path)){
            return file_put_contents($path,$contents);
        }
        return false;
    }
}



















